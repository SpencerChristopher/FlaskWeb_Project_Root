## MUST HAVE (baseline, before public deployment)

1. Input Validation & Sanitization
   - Use schema validation Pydantic for all API inputs.
   - Strip/escape dangerous HTML/JS in user content (use bleach if rich text is allowed).
   - Enforce max lengths, allowed chars for usernames, slugs, etc.
   [Test] Unit tests for invalid payloads, overlong strings, XSS attempts.

2. JWT Authentication Hardening
   - Use strong secret key from .env (not in repo).
   - Access tokens short-lived (≤ 15m), refresh tokens separate (≥ 7d).
   - Implement token revocation (blocklist).
   [Test] Token expiry tests, blacklisted token test, tampered signature test.

3. HTTPS Everywhere
   - Use Cloudflare Tunnel with TLS/SSL enforced.
   - HSTS enabled in Nginx reverse proxy.
   [Test] SSL Labs scan; verify HTTP → HTTPS redirect.

4. Role-Based Access Control
   - Decorator for @roles_required("admin") on sensitive routes.
   - Deny by default if role not present.
   [Test] Auth tests with user vs admin tokens.

5. Error Handling & Logging
   - Consistent JSON error format for all errors.
   - No stack traces or sensitive info leaked.
   - Logs include timestamp, request ID, severity.
   [Test] 500 handler test; inspect logs for sensitive data leaks.

-----------------------------------
## SHOULD HAVE (improves robustness)

6. Rate Limiting & Abuse Control
   - Flask-Limiter for /login, /register, /contact.
   - Per-IP or per-user throttling.
   [Test] Simulate multiple requests, ensure 429 is returned.

7. Security Headers
   - X-Frame-Options: DENY
   - X-Content-Type-Options: nosniff
   - Referrer-Policy: strict-origin-when-cross-origin
   - Content-Security-Policy (CSP): only allow trusted JS/CSS.
   [Test] curl -I or OWASP ZAP scan for headers.

8. CORS Restrictions
   - Only allow site domain (not "*").
   [Test] Browser requests from untrusted origin → should fail.

9. Database Safety
   - MongoDB: disable `$where` queries, enforce auth, run in Docker with isolated volume.
   - Never log sensitive fields (passwords, tokens).
   [Test] Inject `$` operator in query payload → should be rejected.

10. Secure Session Handling (if used in addition to JWT)
   - httpOnly, Secure, SameSite=strict cookies.
   [Test] Browser devtools inspection for cookie flags.

-----------------------------------
## COULD HAVE (nice-to-have, future hardening)

11. CSP with Nonces
   - Nonces for inline JS/CSS, strict CSP rules.
   [Test] Add script without nonce → blocked by browser.

12. Background Task Queue
   - Offload heavy observers to Redis Queue (RQ).
   [Test] Worker crash → job retries.

13. Monitoring & Alerts
   - Prometheus + Grafana dashboards for security events (login failures, 403s).
   - Alert on anomalies.
   [Test] Simulate brute force, check alert triggers.

14. Advanced User Security
   - 2FA for admin accounts.
   - Email verification for new users.
   [Test] Mock 2FA challenge in integration test.

15. Vulnerability Scanning & Dependency Audits
   - Use `bandit`, `safety`, or `pip-audit` in CI.
   [Test] CI pipeline fails on vulnerable dependency.

-----------------------------------
## TEST STRATEGY (progressive)

- Unit tests: schema validation, auth token handling, RBAC checks.
- Integration tests: API endpoints under rate limiting, login/logout flow.
- Security tests: fuzz input fields, simulate XSS/SQLi, test JWT tampering.
- E2E tests: browser-driven, ensure CSP/CORS headers enforced.
- Continuous tests: run OWASP ZAP baseline scan in CI.

-----------------------------------
# Priority:
- MUST before public deployment.
- SHOULD within first 2 sprints after deployment.
- COULD as part of long-term hardening.
